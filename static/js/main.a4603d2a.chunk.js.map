{"version":3,"sources":["logo.svg","Card.js","DeckOfCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","angle","Math","random","xPosition","yPosition","_transform","style","transform","this","src","img","alt","name","className","Component","DeckOfCards","state","deck_id","showed_cards","remaining","getRandomCard","bind","axios","get","res","console","log","data","id","setState","alert","window","location","reload","url","value","cards","suit","card_name","card_img","image","push","map","c","onClick","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,iQC2B5BC,G,kBAvBb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAA4B,GAAhBF,KAAKC,SAAgB,GACjCE,EAA4B,GAAhBH,KAAKC,SAAgB,GALpB,OAMjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA+CC,EAA/C,sBAAsEJ,EAAtE,QANiB,E,sEAYjB,OACE,yBACEM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,IAAKD,KAAKT,MAAMW,IAChBC,IAAKH,KAAKT,MAAMa,KAChBC,UAAU,a,GAlBCC,cCmEJC,EAjEf,YACE,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDiB,MAAQ,CACXC,QAAS,GACTC,aAAc,GACdC,UAAW,IAEb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPJ,EADrB,uMAYgB,gEAZhB,SAasBC,IAAMC,IADZ,iEAZhB,OAaUC,EAbV,OAcIC,QAAQC,IAAIF,EAAIG,MACVC,EAAKJ,EAAIG,KAAKV,QACpBT,KAAKqB,SAAS,CAAEZ,QAASW,IAhB7B,6QAoBUX,EAAUT,KAAKQ,MAAMC,QAEE,IAAzBT,KAAKQ,MAAMG,UAtBnB,gBAuBMW,MAAM,gBACNC,OAAOC,SAASC,SAxBtB,8BA0BYC,EA1BZ,8CA0ByDjB,EA1BzD,mBA2BwBK,IAAMC,IAAIW,GA3BlC,OA2BYV,EA3BZ,OA4BYG,EAAOH,EAAIG,KAEXQ,EAAQR,EAAKS,MAAM,GAAGD,MACtBE,EAAOV,EAAKS,MAAM,GAAGC,KACrBC,EAhCZ,UAgC2BH,EAhC3B,YAgCoCE,GACxBE,EAAWZ,EAAKS,MAAM,GAAGI,MACzBrB,EAAYQ,EAAKR,WACnBiB,EAAQ,IAENK,KAAK,CACTH,UAAWA,EACXC,SAAUA,IAGZ/B,KAAKqB,SAAS,CACZX,aAAa,GAAD,mBAAMV,KAAKQ,MAAME,cAAiBkB,GAC9CjB,UAAWA,IA5CnB,oIAkDI,IAAMiB,EAAQ5B,KAAKQ,MAAME,aAAawB,IAAI,SAAAC,GAAC,OACzC,kBAAC,EAAD,CAAMjC,IAAKiC,EAAEJ,SAAU3B,KAAM+B,EAAEL,cAIjC,OAFAb,QAAQC,IAAIlB,KAAKQ,MAAMG,WAGrB,yBAAKN,UAAU,eACb,6CACA,4BAAQ+B,QAASpC,KAAKY,eAAtB,YACA,yBAAKP,UAAU,SAASuB,QA3DhC,GAAiCtB,aCQlB+B,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCIciC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a4603d2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    // transform: translate(10px, 20px) rotate(20deg);\n    let angle = Math.random() * 90 - 45;\n    let xPosition = Math.random() * 40 - 20;\n    let yPosition = Math.random() * 40 - 20;\n    this._transform = `translate(${xPosition}px, ${yPosition}px) rotate(${angle}deg)`;\n    // this._ is to make it stay in this value for each card,\n    // so it will not change value to the old cards every time the component renders\n  }\n\n  render() {\n    return (\n      <img\n        style={{ transform: this._transform }}\n        src={this.props.img}\n        alt={this.props.name}\n        className=\"Card\"\n      />\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./DeckOfCards.css\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\n\nexport class DeckOfCards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck_id: \"\",\n      showed_cards: [],\n      remaining: 52\n    };\n    this.getRandomCard = this.getRandomCard.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\";\n    const res = await axios.get(url);\n    console.log(res.data);\n    const id = res.data.deck_id;\n    this.setState({ deck_id: id });\n  }\n\n  async getRandomCard() {\n    const deck_id = this.state.deck_id;\n\n    if (this.state.remaining === 0) {\n      alert(\"out of cards\");\n      window.location.reload();\n    } else {\n      const url = `https://deckofcardsapi.com/api/deck/${deck_id}/draw/`;\n      const res = await axios.get(url);\n      const data = res.data;\n      // console.log(data);\n      const value = data.cards[0].value;\n      const suit = data.cards[0].suit;\n      const card_name = `${value} ${suit}`;\n      const card_img = data.cards[0].image;\n      const remaining = data.remaining;\n      let cards = [];\n\n      cards.push({\n        card_name: card_name,\n        card_img: card_img\n      });\n\n      this.setState({\n        showed_cards: [...this.state.showed_cards, ...cards],\n        remaining: remaining\n      });\n    }\n  }\n\n  render() {\n    const cards = this.state.showed_cards.map(c => (\n      <Card img={c.card_img} name={c.card_name} />\n    ));\n    console.log(this.state.remaining);\n\n    return (\n      <div className=\"DeckOfCards\">\n        <h1>Deck Of Cards</h1>\n        <button onClick={this.getRandomCard}>Click Me</button>\n        <div className=\"cards\">{cards}</div>\n      </div>\n    );\n  }\n}\n\nexport default DeckOfCards;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport DeckOfCards from \"./DeckOfCards\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DeckOfCards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}